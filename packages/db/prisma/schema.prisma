// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(cuid())
  email              String
  password           String?
  profilePic         String?
  accountType        AccountType
  booths             Booth[]     @relation("InterviewerRelation")
  participatedBooths Booth[]     @relation("IntervieweeRelation")
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now())
}

model Booth {
  id            Int     @id @default(autoincrement())
  interviewer   User    @relation("InterviewerRelation", fields: [interviewerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  interviewerId String
  interviewee   User    @relation("IntervieweeRelation", fields: [intervieweeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  intervieweeId String
  title         String
  passed        Boolean @default(false)
  tasks         Task[]
  review        Review?
  rating        Rating?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Task {
  id        Int    @id @default(autoincrement())
  name      String
  booth     Booth  @relation(fields: [boothId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  boothId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Review {
  id        Int     @id @default(autoincrement())
  content   String?
  booth     Booth   @relation(fields: [boothId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  boothId   Int     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Rating {
  id        Int        @id @default(autoincrement())
  content   RatingType
  booth     Booth      @relation(fields: [boothId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  boothId   Int        @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum RatingType {
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
}

enum AccountType {
  CREDENTIALS
  GOOGLE
  GITHUB
}